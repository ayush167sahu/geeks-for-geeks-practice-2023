class Solution{
    public:
    void heapify(vector<int> &ans,int n,int i)
    {
        int largest = i;
        int left = 2*i+1;
        int right = 2*i+2;
        if(left<n && ans[largest]<ans[left])
        {
            largest = left;
        }
        if(right<n && ans[largest]<ans[right])
        {
            largest = right;
        }
        //if the node value is changed the swap it with the nodes and procced to the child nodes
        if(largest!=i)
        {
            swap(ans[largest],ans[i]);
            heapify(ans,n,largest);
        }
    }
    vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m) 
    {
        // your code here
        //step1
        //we have to merge the two arrays
        vector<int> ans;
        //merge 1st array
        for(auto i:a)
          ans.push_back(i);
        //merge 2nd array
        for(auto i:b)
          ans.push_back(i);
        
          
          
        //step 2 we have to call the heapify function based on 0 based indexnig
        int size = ans.size();
        
        for(int i = size/2 - 1; i>=0 ; i--)
        {
            heapify(ans,size,i);
        }
        
        return ans;
    }
};
